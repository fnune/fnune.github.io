---
layout: post
title: 'Learning about program execution in Linux from the output of strace'
comments: true
date: 2022-09-17 17:13:51 +0200
excerpt: 'While reading Michael Kerrisk''s The Linux Programming Interface, I take a look at some strace output for a simple "hello world" program in order to fully understand it.'
---

<!-- Excalidraw link: https://excalidraw.com/#room=7fc1d184366e00caefa8,5GwLrhjOzsbXm3yWHyZEyw -->

I recently started reading Michael Kerrisk's [The Linux Programming Interface](https://man7.org/tlpi/). So far, I've been enjoying it thoroughly. Inspired by it, I took a look at what `strace` outputs for a very simple "hello world" program, with the hopes of understanding what's in it.

Relatively early in the book, Kerrisk introduces the concept of system calls:

> A _system call_ is a controlled entry point into the kernel, allowing a process to request that the kernel perform some action on the process's behalf. The kernel makes a range of services accessible to programs via the system call application programming interface (API). These services include, for example, creatig a new process, performing I/O, and creating a pipe for interprocess communication. (The _syscalls(2)_ manual page lists the Linux system calls.)

The `strace` program traces system calls and signals, and can attach to a running process or be specified a command to run. In this exercise, I'm going to write a simple "hello world" program in C and run `strace` with the compiled output.

```c
#include <stdio.h>

int main() {
  printf("Hello world!");
  return 0;
}
```

I compile it with GCC:

```bash
$ gcc -o hello.out ./hello.c
```

Now we can run it like so:

```bash
$ ./hello.out
Hello world!%
```

Let's take a first look at the output of `strace` without any special flags:

```bash
$ strace ./hello.out
execve("./hello.out", ["./hello.out"], 0x7fffcc590420 /* 113 vars */) = 0
brk(NULL)                               = 0x55f7df1ee000
arch_prctl(0x3001 /* ARCH_??? */, 0x7fff59ff3fe0) = -1 EINVAL (Invalid argument)
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=75074, ...}, AT_EMPTY_PATH) = 0
mmap(NULL, 75074, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fba4a414000
close(3)                                = 0
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\240\206\2\0\0\0\0\0"..., 832) = 832
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
pread64(3, "\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0"..., 48, 848) = 48
pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0+H)\227\201T\214\233\304R\352\306\3379\220%"..., 68, 896) = 68
newfstatat(3, "", {st_mode=S_IFREG|0755, st_size=1983576, ...}, AT_EMPTY_PATH) = 0
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fba4a412000
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
mmap(NULL, 2012056, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fba4a226000
mmap(0x7fba4a24c000, 1486848, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x26000) = 0x7fba4a24c000
mmap(0x7fba4a3b7000, 311296, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x191000) = 0x7fba4a3b7000
mmap(0x7fba4a403000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1dc000) = 0x7fba4a403000
mmap(0x7fba4a409000, 33688, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fba4a409000
close(3)                                = 0
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fba4a224000
arch_prctl(ARCH_SET_FS, 0x7fba4a413580) = 0
mprotect(0x7fba4a403000, 12288, PROT_READ) = 0
mprotect(0x55f7dd843000, 4096, PROT_READ) = 0
mprotect(0x7fba4a45f000, 8192, PROT_READ) = 0
munmap(0x7fba4a414000, 75074)           = 0
newfstatat(1, "", {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x1), ...}, AT_EMPTY_PATH) = 0
brk(NULL)                               = 0x55f7df1ee000
brk(0x55f7df20f000)                     = 0x55f7df20f000
write(1, "Hello world!", 12)            = 12
exit_group(0)                           = ?
+++ exited with 0 +++
```

At first, I'm surprised that there are so many system calls for such a simple program. The system calls executed the most were `mmap` (8 times) and `pread64` (4 times).

Output from `strace` (prior to the use of any flags) is in the format:

```bash
syscall(...arguments) = return_value
```

The first lines are about loading our program for execution, so let's take a look at that!

## Initializing program execution: `execve`

The first system call `execve` executes our program, whose executable can be found at its first argument `pathname`, and indicates some additional info:

```bash
#        pathname       arguments        &env[]            env[].length
1 execve("./hello.out", ["./hello.out"], 0x7fffcc590420 /* 113 vars */) = 0
```

In the arguments array, the first is simply the name of the program, and I didn't pass any more arguments. By default, only a pointer to the environment variables array is printed, together with a number indicating how many environment variables are defined. The `strace` flag `-v` makes the output verbose by dereferencing pointers such as the one for `env[]`, and `-s` lets us set the maximum length of the string representation of these values.

```bash
$ strace -s 10000 -v ./hello.out
execve("./hello.out", ["./hello.out"], ["ENV_VAR_1=VALUE", "ENV_VAR_2=VALUE"]) = 0
...
```

So what exactly is meant by "executes our program"? The `man` page for `execve` states the following:

> `execve()` executes the program referred to by pathname. This causes the program that is currently being run by the calling process to be replaced with a new program, with newly initialized stack, heap, and (initial‚Äê ized and uninitialized) data segments.

This leaves us with the question: which currently-running program is `execve` replacing? I called `./hello.out` from a shell. Presumably, if my program were to substitute the shell process, then I wouldn't have a shell to come back to when my program ends, and the terminal would exit.

## Creating a child process: `fork`

Programs in Linux are executed by means of a mechanism called [fork-exec](https://en.wikipedia.org/wiki/Fork%E2%80%93exec). The `fork` system call creates a child process by duplicating the calling process.

<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 487.21050049662585 411.74482531780495" width="487.21050049662585" height="411.74482531780495">
  <!-- svg-source:excalidraw -->

  <defs>
    <style>
      @font-face {
        font-family: "Virgil";
        src: url("https://excalidraw.com/Virgil.woff2");
      }
      @font-face {
        font-family: "Cascadia";
        src: url("https://excalidraw.com/Cascadia.woff2");
      }
    </style>
  </defs>
  <rect x="0" y="0" width="487.21050049662585" height="411.74482531780495" fill="#ffffff"></rect><g stroke-linecap="round" transform="translate(11 42.5) rotate(0 87.5 53)"><path d="M1.09 -0.84 C63.65 2.29, 123.33 2.73, 172.88 -2.11 M0.06 -1.72 C45.38 -2.54, 91.11 -0.71, 176.63 0.61 M174.9 -3.1 C175.23 36.27, 172.16 70.1, 175.32 102.24 M174.03 -0.17 C176.06 24.04, 172.76 49.45, 175.73 104.01 M175.71 109.43 C133.15 103.89, 84.24 105.46, -3.62 103.94 M175.91 106.69 C133.53 103.56, 92.84 105.6, -1.86 107.17 M-2.87 104.76 C-0.01 74.12, -1.81 33.96, -2.56 3.46 M-1.5 104.69 C0.78 85.86, -1.93 61.79, -1.84 -0.7" stroke="#000000" stroke-width="1" fill="none"></path></g><g stroke-linecap="round" transform="translate(218.5 42.5) rotate(0 87.5 52.5)"><path d="M0.67 -0.77 C62.27 -2.52, 124.98 -6.12, 174.01 1.09 M177.61 1.87 C174.61 27.19, 175.05 59.36, 178.05 105.12 M176.59 108.91 C140.81 106.44, 101.63 106.45, 1.31 104.9 M-3.49 103.43 C0.54 77.89, -2.25 56.89, 3.04 -1.93" stroke="#000000" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g><g transform="translate(15 10) rotate(0 63 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">shell process</text></g><g transform="translate(225 11.5) rotate(0 104 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">copy of shell process</text></g><g stroke-linecap="round"><g transform="translate(68.64313852626913 150.67777964623224) rotate(0 138.7179709232347 31.942831006938263)"><path d="M0.9 0.22 C11.21 9.47, 27.19 46.75, 61.21 56.47 C95.23 66.19, 169.01 67.73, 205.03 58.53 C241.05 49.33, 265.29 10.98, 277.33 1.28 M-0.09 -0.71 C10.08 9.26, 25.86 48.45, 60.01 57.99 C94.16 67.54, 168.57 65.8, 204.82 56.55 C241.08 47.3, 265.71 11.88, 277.52 2.5" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(68.64313852626913 150.67777964623224) rotate(0 138.7179709232347 31.942831006938263)"><path d="M265.22 28.89 C267.69 24.71, 272 16.08, 277.9 2.21 M264.44 29.24 C268.77 23.25, 271.41 16.65, 277.13 3.47" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(68.64313852626913 150.67777964623224) rotate(0 138.7179709232347 31.942831006938263)"><path d="M250.7 14.38 C256.86 13.65, 264.74 8.59, 277.9 2.21 M249.93 14.73 C257.59 12.25, 263.68 9.09, 277.13 3.47" stroke="#000000" stroke-width="1" fill="none"></path></g></g><g transform="translate(179 175.5) rotate(0 21 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">fork</text></g><g stroke-linecap="round" transform="translate(10 295.74482531780495) rotate(0 87.5 53)"><path d="M2.08 3.3 C36.71 -2.39, 76.78 3.07, 174.07 -1.11 M0.26 -0.69 C42.05 -1.13, 83.54 -2.11, 174.76 -0.94 M176.98 3.52 C174.19 34.05, 176.38 65.33, 171.68 109.98 M174.65 0.98 C172.25 22.58, 174.69 43.59, 176.68 107.45 M171.61 108.44 C136.86 107.37, 104.46 108.96, -0.5 105.52 M173.08 105.66 C133.07 108.9, 90.89 105.29, 1.26 105.19 M-2.99 102.82 C-2.47 82.2, 1.2 66.13, 2.54 -3.99 M0.99 107.61 C2.16 84.03, -0.74 60.26, 1.57 0.05" stroke="#000000" stroke-width="1" fill="none"></path></g><g stroke-linecap="round" transform="translate(217.5 295.74482531780495) rotate(0 87.5 52.5)"><path d="M3.3 -2.26 C62.11 -2.98, 133.41 -2.75, 173.89 -2.55 M-0.69 0.69 C42.18 0.37, 81.99 -0.7, 174.06 0.5 M178.52 -0.98 C174.37 33.53, 171.19 61.32, 178.98 101.42 M175.98 -1.25 C174.62 25.27, 173.31 49.85, 176.45 103.15 M177.44 103.21 C111.99 104.17, 51.79 101.53, -0.48 102.72 M174.66 105.6 C124.77 102.59, 69 102.9, -0.81 103.11 M-3.18 103.16 C-2.29 72.21, 3.41 38.31, -3.99 -3.3 M1.61 106.62 C-0.52 74.87, -1.24 48.87, 0.05 1.13" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(14 263.24482531780495) rotate(0 63 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">shell process</text></g><g transform="translate(224 263.74482531780495) rotate(0 39 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">hello.out</text></g><g stroke-linecap="round"><g transform="translate(402 93.5) rotate(0 32.55205669779792 131.30607887550258)"><path d="M1.07 0.7 C12.3 8.57, 56.11 7.13, 66.9 47.23 C77.7 87.32, 78.62 206.21, 65.82 241.25 C53.03 276.29, 2.66 254.78, -9.89 257.48 M0.18 0.01 C11.28 7.51, 55.11 4.86, 65.91 45.22 C76.7 85.58, 77.63 206.66, 64.97 242.17 C52.3 277.69, 1.98 255.74, -10.11 258.31" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(402 93.5) rotate(0 32.55205669779792 131.30607887550258)"><path d="M20.19 251.02 C11.84 253, 2.64 253.66, -10.98 257.5 M19.37 250.99 C11.28 253.95, 4.79 255.44, -10.56 258.25" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(402 93.5) rotate(0 32.55205669779792 131.30607887550258)"><path d="M17.96 271.42 C10.19 268.08, 1.57 263.44, -10.98 257.5 M17.14 271.39 C9.47 269.16, 3.55 265.46, -10.56 258.25" stroke="#000000" stroke-width="1" fill="none"></path></g></g><g transform="translate(410 213.5) rotate(0 23.5 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">exec</text></g><g stroke-linecap="round"><g transform="translate(18 233.5) rotate(0 187.0766393646598 -0.6412285074591182)"><path d="M-1.22 -1.98 C61.38 -1.81, 313.08 0.15, 375.38 0.69" stroke="#d1d1d1" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g></g><g transform="translate(226 46.705725647183726) rotate(0.6030911943805374 67.5 10.5)"><text x="0" y="15" font-family="Virgil, Segoe UI Emoji" font-size="16px" fill="#495057" text-anchor="start" style="white-space: pre;" direction="ltr">Address 55cf3...</text></g><g transform="translate(223.9999999999999 300.7057256471837) rotate(0.6030911943805374 67.5 10.5)"><text x="0" y="15" font-family="Virgil, Segoe UI Emoji" font-size="16px" fill="#495057" text-anchor="start" style="white-space: pre;" direction="ltr">Address 55cf3...</text></g></svg>

This means when `execve` gets called, it's substituting the cloned instance of our shell in memory, so that the shell process doesn't cease to exist. You can try opening a new terminal and running a program using `exec` (as in `exec ./hello.out`), and you'll see your terminal closes afterwards!

At the end of `execve` our process for `hello.out` has received a newly initialized stack, heap and data segments as fresh new virtual address space. In memory, it looks a little bit like this:

<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 538.5 327.5" width="538.5" height="327.5">
  <!-- svg-source:excalidraw -->

  <defs>
    <style>
      @font-face {
        font-family: "Virgil";
        src: url("https://excalidraw.com/Virgil.woff2");
      }
      @font-face {
        font-family: "Cascadia";
        src: url("https://excalidraw.com/Cascadia.woff2");
      }
    </style>
  </defs>
  <rect x="0" y="0" width="538.5" height="327.5" fill="#ffffff"></rect><g transform="translate(60.00000000000004 162.5) rotate(0 23.5 26)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">text</text><text x="0" y="44" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr"></text></g><g stroke-linecap="round" transform="translate(166.50000000000003 193.5) rotate(0 87.5 60)"><path d="M30 0 M30 0 C53.88 3.01, 86.61 -3.29, 145 0 M145 0 C162.23 1.66, 177.5 11.34, 175 30 M175 30 C172.74 51.98, 177.73 70.46, 175 90 M175 90 C173.35 108.55, 167.64 121.09, 145 120 M145 120 C101.53 123.35, 58.28 123.18, 30 120 M30 120 C10.61 118.95, -0.36 114, 0 90 M0 90 C2.4 66.59, 3.51 53.75, 0 30 M0 30 C0.35 12.41, 11.88 2.56, 30 0" stroke="#000000" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g><g stroke-linecap="round" transform="translate(411.50000000000006 194) rotate(0 58.5 60)"><path d="M29.25 0 M29.25 0 C44.15 2.29, 63.22 4.6, 87.75 0 M87.75 0 C103.56 -0.16, 116.2 12.86, 117 29.25 M117 29.25 C118.27 52.31, 121 65.38, 117 90.75 M117 90.75 C119.32 111.94, 104.19 121.65, 87.75 120 M87.75 120 C67.59 122.6, 54.56 124.69, 29.25 120 M29.25 120 C8.26 120.76, 0.98 113.66, 0 90.75 M0 90.75 C1.62 67.84, 2.07 41.11, 0 29.25 M0 29.25 C-2.06 12.22, 13.53 2.73, 29.25 0" stroke="#000000" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g><g stroke-linecap="round" transform="translate(133.00000000000003 192) rotate(0 13 61)"><path d="M1.76 0.61 C9.5 -0.44, 16.61 -0.9, 25.8 -1.2 M25.4 -1.03 C24.64 43.71, 24.65 85.96, 26.85 123.63 M24.38 121.51 C15.18 120.08, 6.37 120.09, 0.7 122.66 M1.96 120.77 C-0.59 91, 0.21 62.21, 0.4 -1.58" stroke="#000000" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g><g transform="translate(231.00000000000003 164) rotate(0 22.5 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">heap</text></g><g stroke-linecap="round"><g transform="translate(342.50000000000006 251.65053170408692) rotate(0 12.988895905017841 -2.1816982091843045)"><path d="M1.14 -1.89 C5.62 -2.64, 21.13 -2.47, 24.84 -2.41" stroke="#000000" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g><g transform="translate(342.50000000000006 251.65053170408692) rotate(0 12.988895905017841 -2.1816982091843045)"><path d="M11.28 1.58 C15.32 -0.78, 18.82 1.77, 23.5 -0.16" stroke="#000000" stroke-width="1.5" fill="none"></path></g><g transform="translate(342.50000000000006 251.65053170408692) rotate(0 12.988895905017841 -2.1816982091843045)"><path d="M11.36 -7.02 C15.51 -7.42, 18.99 -2.91, 23.5 -0.16" stroke="#000000" stroke-width="1.5" fill="none"></path></g></g><g stroke-linecap="round"><g transform="translate(410.00000000000006 249) rotate(0 -11.415614598989464 1.668319870519639)"><path d="M-0.06 2.6 C-3.84 2.7, -19.14 1.75, -22.77 0.74" stroke="#000000" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g><g transform="translate(410.00000000000006 249) rotate(0 -11.415614598989464 1.668319870519639)"><path d="M-9.36 -1.37 C-13.41 0.04, -20.22 -0.38, -24.36 3.03" stroke="#000000" stroke-width="1.5" fill="none"></path></g><g transform="translate(410.00000000000006 249) rotate(0 -11.415614598989464 1.668319870519639)"><path d="M-10.52 6.42 C-14.23 5.51, -20.7 2.78, -24.36 3.03" stroke="#000000" stroke-width="1.5" fill="none"></path></g></g><g transform="translate(443.00000000000006 166) rotate(0 28 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">stack</text></g><g stroke-linecap="round" transform="translate(38.00000000000004 189) rotate(0 43 62.5)"><path d="M0 0 C0 0, 0 0, 0 0 M0 0 C0 0, 0 0, 0 0 M0.34 5.3 C2.77 3.72, 3.07 0.91, 5.57 1.66 M0.51 6.34 C1.51 4, 3.46 1.71, 5.51 0.91 M-1.45 13.17 C5.21 8.73, 2.33 8.04, 9.81 -0.09 M0.38 10.74 C4.3 8.59, 9.41 3.7, 11.75 -0.5 M-2.79 19.9 C2.78 13.94, 12.76 3.9, 16.84 0.74 M-0.93 20.4 C3.99 12.07, 7.52 11.34, 17.53 2.25 M1.41 27.86 C4.38 14.57, 10.4 13.51, 25.1 0.06 M-0.71 24.47 C9.27 14.38, 14.69 4.12, 22.07 1.59 M-0.39 31.81 C11.38 21.83, 13.17 11.01, 23.17 -0.62 M0.48 30.16 C8 17.7, 17.24 8.42, 27.56 -1.12 M1.03 36.48 C9.29 21.36, 20.59 13.26, 34.89 3.77 M1.25 37.93 C7.24 28.75, 17.47 17.37, 32.81 -1.17 M-0.64 45.21 C10.17 27.51, 28.17 16.42, 39.88 -2.13 M-1.46 42.49 C10.82 29.57, 21.42 15.15, 37.3 -1.65 M0.74 48.12 C11.69 35.33, 32.71 12.87, 40.88 -2.14 M-1.45 50.01 C14.96 32.45, 26.76 14.77, 43.41 -0.42 M2.39 50.92 C12.06 38.42, 30.23 20.48, 48.39 3.52 M-1.57 55.86 C11.81 38.66, 25.92 23.43, 48.17 -1.13 M1.31 58.87 C21.78 34.02, 43.5 11.3, 52.01 2.16 M1.95 61.66 C15.42 43.4, 30.11 23.22, 53.52 -0.21 M-3.05 65.54 C23.35 47.32, 42.03 22.67, 61.12 0.67 M1.15 68.98 C12.14 53.15, 25.86 35.59, 58.08 2.14 M3.16 73.05 C16.03 56, 29.03 41.17, 60.19 -2.51 M-0.65 72.6 C13.38 59.07, 27.24 45.19, 63.33 -1.07 M-3.71 80.37 C17.43 57.58, 32.02 41.57, 65.48 -1.36 M-1.81 77.8 C22.39 53.27, 44.24 26.01, 69.44 1.39 M-2.28 88 C26.18 55.45, 59.96 21.47, 72.34 -2.31 M-0.82 86.04 C23.16 60.62, 42.98 36.96, 73.48 -0.05 M2.66 90.01 C25.69 61.09, 50.24 30.87, 79.91 -0.23 M-0.46 92.04 C22.76 66.92, 46.66 43.81, 81.17 1.31 M-1.26 94.78 C24.57 68.52, 44.44 41.76, 86.4 1.58 M1.69 97.45 C31.81 58.78, 65.01 22.14, 85.15 1.33 M2 105.27 C32.29 63.45, 70.36 24.57, 87.86 1.64 M0.37 104.16 C19.48 81.38, 38.22 64.75, 86.72 0.39 M-3.04 107.23 C22.44 82.84, 40.02 56.36, 92.06 9.29 M1.61 111.53 C18.75 87.79, 40.6 62.6, 88.78 9.31 M3.22 113.99 C26.05 85.25, 48.37 62.99, 91.18 16.13 M0.36 114.12 C32.33 79.42, 60.4 42.47, 87.44 13.87 M-3.84 118.43 C13.76 95.02, 40.01 79.04, 89.18 17.12 M0.2 122.73 C21.38 98.39, 42.38 76.93, 90.47 20.83 M-0.45 127.49 C20.05 107, 39.93 88.48, 89.83 22.76 M0.96 127.87 C35.25 87.43, 68.82 46.06, 88.27 27.18 M6.3 130.16 C39.04 91.95, 67.72 64.04, 91.31 31.88 M6.43 124.74 C33.03 97.59, 55.82 69.01, 87.5 33.85 M13.8 126.53 C33.47 103.54, 54.53 76.94, 90.23 35.86 M10.73 127.31 C40.97 96.27, 66.45 64.18, 90.12 39 M19.2 123.76 C35.15 109.45, 52.99 83.22, 85.68 46.89 M16.58 125.27 C41.27 98.37, 67.6 69.85, 88.37 43.29 M26.7 128.52 C47 97.1, 66.95 73.83, 89.8 46.74 M21.63 125.48 C48.93 95.48, 74.73 65.51, 90.41 51.56 M24.32 123.09 C47.55 108.12, 61.07 88.43, 88.55 58.74 M26.15 125.06 C42.18 107.59, 58.89 90.09, 88.07 57.89 M35.16 125.27 C50.06 100.87, 71.71 80.01, 84.31 64.51 M35.33 124.33 C50.06 106.98, 67.32 87.65, 86.41 63.32 M38.11 124.48 C55.69 107.92, 68.65 88.33, 91.86 72.24 M39.04 127.83 C53.11 108.07, 70.88 90.11, 86.77 69.1 M42.46 126.38 C58.7 110.25, 71.48 96.27, 86.49 72.96 M45.35 126.08 C57.5 113.77, 67.2 98.05, 89.82 73.98 M51.97 125.25 C57.45 115.32, 62.9 108.94, 86.52 77.24 M47.66 124.79 C63.01 109.48, 72.75 96.95, 89.13 79.89 M52.83 124.16 C63.49 113.5, 75.81 106.6, 90.1 91.2 M55.66 126.18 C67.93 109.9, 80.57 96.86, 86.92 89.01 M56.33 123.74 C67.24 120.83, 73.54 115.5, 85.79 97.3 M60.93 126.65 C67.64 117.62, 76.17 104.32, 87.66 93.47 M67.54 130.2 C72.85 119.19, 77.86 111.09, 88.58 98.54 M64.75 125.85 C74.22 116.66, 79.45 107.97, 89.11 100.62 M72.61 127.28 C78.33 118.03, 82.8 113.48, 87.92 106.75 M72.27 127.62 C73.58 118.76, 79.44 114.64, 89.34 106.29 M71.51 124.31 C78.95 119.17, 84.17 119.86, 90.34 115.32 M76.31 125.04 C77.65 122.55, 81.64 118.48, 88.31 112.51 M81.19 127.28 C85.37 123.78, 86.67 120.23, 88.24 116.39 M80.28 125.75 C84.83 122.56, 87.4 120.04, 87.97 117.15 M-0.01 125 C-0.01 125, -0.01 125, -0.01 125 M-0.01 125 C-0.01 125, -0.01 125, -0.01 125 M7.14 125.92 C6.07 124.29, 4.17 122.34, 0.74 121.01 M7.01 124.89 C5.37 124.48, 3.49 123.01, 0.69 119.75 M9.76 126.95 C8.01 122.16, 6.67 117.62, 2.77 114.31 M11.41 125.55 C9.02 123.36, 4.84 118.9, -0.81 115.93 M20.26 127.44 C9.38 119.13, 7.49 113.78, -2.6 112.7 M20.37 126.8 C11.13 119.45, 6.28 114.18, 1.16 108.25 M25.87 126.71 C19.4 121.71, 10.29 116.63, -0.56 100.67 M22.59 126.16 C18.71 117.98, 9.67 112.8, 1.54 103.68 M31.86 124.33 C18.22 113.28, 8.39 112.48, -2.64 102.34 M29.52 124.22 C19.28 117.72, 11.56 109.04, -0.73 99.99 M34.25 123.99 C27.67 121.31, 23.36 114.12, -1.63 91.79 M36.79 125.63 C27.62 118.56, 15.9 106.98, 1.76 93.17 M43.49 121.91 C31.08 115.92, 24.7 109.39, 1.12 88.27 M43.3 124.29 C25.99 109.62, 8.26 94.22, -0.31 90.03 M52.74 126.84 C31.64 110.92, 16.71 99.09, 3.69 80.98 M50.51 124.28 C33.18 112.07, 14.04 96.53, -1.95 82 M54.57 125.49 C39.44 117.08, 32.91 106.74, -0.39 76.31 M54.13 126.25 C41.83 112.68, 29.4 102.09, -0.91 77.33 M61.02 121.74 C44.05 106.25, 21.77 91.86, 1.83 70.58 M59.18 123.72 C46.14 109.62, 26.33 96.88, 1.34 70.89 M64.28 126.07 C47.46 110.54, 33.44 98.39, -1.25 65.3 M67.68 125.44 C42.18 101.15, 13.33 76.56, -1.37 68.36 M69.01 127.52 C58.35 112.23, 37.44 89.44, 2.2 63.91 M73.96 124.41 C48.23 102.93, 25.47 83.3, -0.96 60.04 M76.54 121.67 C48.74 105.38, 26.48 78.48, 3.46 55.05 M79.86 126.78 C56.96 103.53, 32.52 82.51, -0.03 57.07 M85.63 124.01 C60.25 97.2, 27.93 75.74, -2.78 49.29 M86.51 126.31 C53.94 97.4, 18.78 67.72, -0.94 49.17 M85.49 118.63 C56.82 96.63, 34.8 69.39, 1.65 46.4 M90.3 122 C56.44 98.74, 25.19 72.27, 1.27 44.92 M85.75 116.16 C63.91 97.85, 49.19 80.17, 2.33 40.07 M87.93 117.02 C62.57 94.58, 33.65 71.99, -2.19 41.49 M88.53 113.05 C70.4 93.93, 50.51 84.25, -3.73 33.18 M87.4 111.06 C68.31 96.09, 49.38 80.92, 1.21 36.88 M90.33 107.05 C57.97 81.71, 25.99 54.91, -0.07 26.56 M88.94 104.75 C62.99 83.68, 40.52 60.18, 0.22 27.7 M89.13 99.12 C55.56 72.46, 21.4 39.78, -2.78 26.21 M87.11 102.56 C66.89 82.63, 47.89 66.44, -1.06 25.4 M85.06 98.79 C66.55 78.67, 44.26 57, 3.45 16.09 M90.47 95.22 C59.86 71.22, 29.54 46.97, -0.31 18.02 M88.71 88.17 C68.89 72.1, 42.82 50.79, -2.58 13.33 M88.86 88.69 C63.94 67.67, 37.33 44.19, -1.87 14.45 M89.36 81.89 C72.99 70.54, 54.05 49.61, 2.08 9.65 M88.67 85.1 C66.6 66.72, 45.71 49.21, -1.1 6.83 M87.7 76.53 C70.91 65.38, 47.54 46.04, -3.19 -0.65 M88.55 81.18 C64.62 60.6, 41.93 39.5, -1.06 3.49 M91.9 73.84 C56.67 45.45, 16.14 14.96, -1.54 -0.09 M90.46 76.5 C61.19 50.14, 30.5 24.97, -0.5 -1.34 M85.52 69.53 C56.45 41.73, 22.64 10.52, 9.84 -3.32 M86.6 67.23 C59.7 44.8, 33.04 21.22, 5.59 -1.96 M87.6 60.47 C57.89 38.46, 31.22 14.06, 14.36 -0.96 M90.51 62.38 C62.51 40.16, 34.05 18.94, 11.72 0.07 M88.59 57.49 C71.86 47.67, 57.94 31.86, 23.43 1.5 M87.94 57.55 C60.88 35.93, 33.53 12.53, 20.22 -2.06 M86.39 52.6 C68.8 36.26, 47.73 19.75, 23.86 0.52 M87.97 55.2 C63.13 31.47, 39.73 12.68, 23.67 -2.56 M86.33 47.74 C70.17 28.12, 47.61 6.1, 29.96 1.72 M89.96 46.36 C65.63 28.06, 45.28 10.7, 31.96 -2.79 M89.18 46.06 C76.39 27.79, 61.89 17.39, 36.16 1.34 M90.52 42.92 C74.03 27.09, 56.58 16.83, 36 -0.87 M91.16 40.62 C75.07 21.81, 60.95 14.93, 41.35 -1.83 M86.58 35.36 C77.59 27.46, 69.88 18.58, 42.98 -2.7 M87.91 29.68 C72.51 24.11, 66.13 5.86, 49.14 -2.48 M90.32 33 C75.14 22.39, 61.09 7.63, 51.63 -0.97 M90.51 29.45 C81.39 22.49, 72.91 14.16, 52.54 0.67 M88.22 25.77 C76.04 19.3, 66.52 9.67, 55.95 -0.8 M89.49 25.29 C83.56 17.11, 70.97 11.45, 62.01 -3.96 M88.04 20.41 C77.35 13.78, 68.8 3.39, 60.22 0.52 M86.79 16.55 C86.2 15.86, 77.83 5.39, 66.19 -3.3 M89.79 14.29 C79.95 8.69, 75.25 6.79, 66.77 0 M91.66 7.89 C86.56 7.27, 83.81 4.56, 72.26 -3.65 M88.8 11.58 C84.54 7.09, 77.05 1.97, 75.14 -2.15 M88.74 5.34 C86.95 3.8, 84.78 3.45, 81.1 -2.18 M87.37 5.28 C86.22 3.53, 81.88 0.63, 81.05 -1.39" stroke="#ced4da" stroke-width="0.5" fill="none"></path><path d="M3.52 2.7 C16.32 1.6, 32.74 -0.07, 89.9 -0.63 M1.12 1.67 C25.11 0.53, 47.67 -0.82, 85.17 -1.14 M82.42 -2.5 C89.4 31.63, 87.08 69.43, 85.13 126.13 M85.23 0.14 C86.55 35.49, 84.81 66.96, 85.36 124.33 M86.13 121.7 C62.84 126.93, 35.49 127.3, -0.57 128.88 M87.02 125.98 C60.51 125.48, 32.7 126.39, -1.51 124.73 M-3.83 124.87 C0.45 77.22, -2.61 31.73, -1.75 2.26 M0.5 126.9 C1.19 80.64, 0.88 34.46, -0.9 1.75" stroke="#495057" stroke-width="1" fill="none"></path></g><g transform="translate(122.00000000000004 243.5) rotate(269.0122396003602 24 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#495057" text-anchor="start" style="white-space: pre;" direction="ltr">data</text></g><g transform="translate(51.00000000000004 20) rotate(0 33 18)"><text x="0" y="25" font-family="Virgil, Segoe UI Emoji" font-size="28px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">exec</text></g><g transform="translate(49.00000000000004 98) rotate(0 39 13)"><text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">hello.out</text></g><g stroke-linecap="round"><g transform="translate(95.81703495479513 66.9194004116317) rotate(0 -0.3683767629733836 12.324744312753076)"><path d="M0.83 -0.12 C0.66 4.16, -0.77 21.76, -1.11 25.87 M-0.2 -1.22 C-0.43 2.7, -1.34 19.69, -1.56 24.17" stroke="#000000" stroke-width="2" fill="none"></path></g></g><g stroke-linecap="round"><g transform="translate(90.3253690781925 130.16224060654642) rotate(0 0.7884953287272793 14.239518685969529)"><path d="M0.79 -0.1 C1.19 4.97, 1.71 24.7, 1.83 29.68 M-0.25 -1.2 C0.06 3.61, 0.82 23.13, 0.98 27.99" stroke="#000000" stroke-width="2" fill="none"></path></g><g transform="translate(90.3253690781925 130.16224060654642) rotate(0 0.7884953287272793 14.239518685969529)"><path d="M-4.58 14.83 C-2.17 17.81, -0.66 22.29, 1.98 27.4 M-4.77 15.19 C-2.19 19.12, -0.51 24.51, 0.82 27.73" stroke="#000000" stroke-width="2" fill="none"></path></g><g transform="translate(90.3253690781925 130.16224060654642) rotate(0 0.7884953287272793 14.239518685969529)"><path d="M5.3 14.47 C5.21 17.6, 4.23 22.17, 1.98 27.4 M5.11 14.82 C4.01 18.84, 2.02 24.37, 0.82 27.73" stroke="#000000" stroke-width="2" fill="none"></path></g></g><g stroke-linecap="round"><g transform="translate(126.99259749681204 37.27061937390957) rotate(0 174.8738056598291 57.794462985619994)"><path d="M2.16 2.68 C119.72 -1.63, 238.56 -0.72, 310.34 3.34 M306.42 -1.76 C322.45 38.61, 330.16 69.73, 347.59 117.35" stroke="#495057" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g><g transform="translate(126.99259749681204 37.27061937390957) rotate(0 174.8738056598291 57.794462985619994)"><path d="M331.68 97.74 C335.34 100.47, 340.93 109.77, 348.37 119.37" stroke="#495057" stroke-width="1.5" fill="none"></path></g><g transform="translate(126.99259749681204 37.27061937390957) rotate(0 174.8738056598291 57.794462985619994)"><path d="M351.07 91.02 C347.18 96.41, 345.24 108.31, 348.37 119.37" stroke="#495057" stroke-width="1.5" fill="none"></path></g></g><g stroke-linecap="round"><g transform="translate(130.81212323047737 45.31045941810709) rotate(2.028386558906463 62.3213208189962 50.271865003265106)"><path d="M-2.38 0.56 C29.15 1.54, 52.75 0.92, 127.02 -5.29 M122.95 -8.1 C126.93 26.93, 125.51 62.39, 126.22 108.65" stroke="#495057" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g><g transform="translate(130.81212323047737 45.31045941810709) rotate(2.028386558906463 62.3213208189962 50.271865003265106)"><path d="M113.39 81.6 C119.75 89.5, 117.71 96.74, 129.45 110.48" stroke="#495057" stroke-width="1.5" fill="none"></path></g><g transform="translate(130.81212323047737 45.31045941810709) rotate(2.028386558906463 62.3213208189962 50.271865003265106)"><path d="M133.91 81.46 C135.63 89.22, 128.94 96.49, 129.45 110.48" stroke="#495057" stroke-width="1.5" fill="none"></path></g></g><g transform="translate(199.00000000000003 10) rotate(0 72 10.5)"><text x="0" y="15" font-family="Virgil, Segoe UI Emoji" font-size="16px" fill="#495057" text-anchor="start" style="white-space: pre;" direction="ltr">assigns addresses</text></g><g transform="translate(52.00000000000004 75.5) rotate(0 43 10.5)"><text x="0" y="15" font-family="Virgil, Segoe UI Emoji" font-size="16px" fill="#495057" text-anchor="start" style="white-space: pre;" direction="ltr">loads text</text></g><g stroke-linecap="round"><g transform="translate(127.89818073975597 50.08289241482731) rotate(0 13.035146108927577 60.66539416169199)"><path d="M1.29 1.21 C8.84 2.43, 13.98 1.03, 21.45 4.48 M24.78 6.56 C22.14 52.14, 19.92 95.85, 20.04 120.13" stroke="#000000" stroke-width="1.5" fill="none" stroke-dasharray="8 9"></path></g><g transform="translate(127.89818073975597 50.08289241482731) rotate(0 13.035146108927577 60.66539416169199)"><path d="M11.57 92.96 C15.06 101.35, 16.18 107.1, 18.39 120" stroke="#000000" stroke-width="1.5" fill="none"></path></g><g transform="translate(127.89818073975597 50.08289241482731) rotate(0 13.035146108927577 60.66539416169199)"><path d="M32.09 93.33 C29.41 101.65, 24.37 107.29, 18.39 120" stroke="#000000" stroke-width="1.5" fill="none"></path></g></g><g transform="translate(-46.999999999999986 239.5) rotate(270 67.5 10.5)"><text x="0" y="15" font-family="Virgil, Segoe UI Emoji" font-size="16px" fill="#495057" text-anchor="start" style="white-space: pre;" direction="ltr">Address 55cf3...</text></g></svg>

To see what exactly the kernel is doing with the memory of your process, you can run `pmap $PID` or examine the contents of the files in `/proc/$PID/maps`, where `$PID` is the process ID of the process you want to investigate.

At the end of `execve`, a function called [`search_binary_handler`](https://github.com/torvalds/linux/blob/3d742d4b6ebb3348e1d478047cfb18b9b337b8df/fs/exec.c#L1698) gets called. It checks the `hello.out` for a matching magic number (a few bits at the start of the file) to find a handler. The binary handler that matches our program is [`binfmt_aout.c`](https://github.com/torvalds/linux/blob/2388777a0a5957a10b3d78677216530a9b3bd09f/fs/binfmt_aout.c#L117), which handles `.out`-style ELF files as produced by GCC. Then, [`binfmt_aout::load_aout_binary`](https://github.com/torvalds/linux/blob/5bfc75d92efd494db37f5c4c173d3639d4772966/fs/exec.c#L1239) ends up calling [`begin_new_exec`](https://github.com/torvalds/linux/blob/5bfc75d92efd494db37f5c4c173d3639d4772966/fs/exec.c#L1234-L1239), marked as the "point of no return" in the Linux kernel source, after which any failure results in a fatal signal.

From then on, the kernel takes care of memory-mapping anything required by the executable. The code for this is architecture-dependent (see, for example, different implementations of [`activate_mm`](https://github.com/torvalds/linux/search?q=activate_mm) in the kernel). Ultimately, the kernel configures the CPU context to kickstart execution of our process.

_P.S. You may be wondering why `fork` didn't show up in the output of `strace`. The answer is simply that `strace`'s tracing begins after it has forked in order to execute the program passed in as an argument. Thanks, [Kenster on StackOverflow](https://unix.stackexchange.com/a/267223)._
